2.2.1 Photoresistor
===================

Introduction
------------

Photoresistor is a commonly used component of ambient light intensity in
life. It helps the controller to recognize day and night and realize
light control functions such as night lamp. This project is very similar
to potentiometer, and you might think it changing the voltage to sensing
light.

Components
----------

.. image:: media/list_2.2.1_photoresistor.png


Principle
---------

A photoresistor or photocell is a light-controlled variable resistor.
The resistance of a photoresistor decreases with increasing incident
light intensity; in other words, it exhibits photo conductivity. A
photoresistor can be applied in light-sensitive detector circuits, and
light- and darkness-activated switching circuits.

.. image:: media/image196.png

Visit: https://en.wikipedia.org/wiki/Photoresistor, for more information.

Schematic Diagram
-----------------

.. image:: media/image321.png


.. image:: media/image322.png


Experimental Procedures
-----------------------

**Step 1:** Build the circuit.

.. image:: media/image198.png

**Step 2:** Go to the folder of the code.

.. code-block::

    cd /home/pi/raphael-kit/python/

**Step 3:** Run the executable file.

.. code-block::

    sudo python3 2.2.1_Photoresistor.py

The code run, the brightness of LED will vary depending on the intensity
of light that the photoresistor senses.

**Code**

.. code-block:: python

    #!/usr/bin/env python3
    import RPi.GPIO as GPIO
    import ADC0834
    import time
    LedPin = 22
    def setup():
        global led_val
        # Set the GPIO modes to BCM Numbering
        GPIO.setmode(GPIO.BCM)
        # Set all LedPin's mode to output and initial level to High(3.3v)
        GPIO.setup(LedPin, GPIO.OUT, initial=GPIO.HIGH)
        ADC0834.setup()
        # Set led as pwm channel and frequece to 2KHz
        led_val = GPIO.PWM(LedPin, 2000)
        # Set all begin with value 0
        led_val.start(0)
    def destroy():
        # Stop all pwm channel
        led_val.stop()
        # Release resource
        GPIO.cleanup()
    def loop():
        while True:
            analogVal = ADC0834.getResult()
            print ('analog value = %d' % analogVal)
            led_val.ChangeDutyCycle(analogVal*100/255)
            time.sleep(0.2)
    if __name__ == '__main__':
        setup()
        try:
            loop()
        except KeyboardInterrupt: # When 'Ctrl+C' is pressed, the program destroy() will be executed.
            destroy()

**Code Explanation**

.. code-block:: python

    def loop():
        while True:
            analogVal = ADC0834.getResult()
            print ('analog value = %d' % analogVal)
            led_val.ChangeDutyCycle(analogVal*100/255)
            time.sleep(0.2)

Read the analog value of CH0 of ADC0834. By default, the function
getResult() is used to read the value of CH0, so if you want to read
other channels, please input 1, 2, or 3 into () of the function
getResult(). Next, what you need is to print the value via the print
function. Because the changing element is the duty cycle of LedPin, the
computational formula, analogVal*100/255 is needed to convert analogVal
into percentage. Finally, ChangeDutyCycle() is called to write the
percentage into LedPin.

Phenomenon Picture
------------------

.. image:: media/image199.jpeg
