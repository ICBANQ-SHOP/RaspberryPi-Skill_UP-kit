2.2.5 IR Obstacle Avoidance Sensor
===================================

Introduction
-----------------

In this lesson, we will learn IR obstacle avoidance module, which is a sensor module that can be used to detect obstacles at short distances, with small interference, easy to assemble, easy to use, etc. It can be widely used in robot obstacle avoidance, obstacle avoidance trolley, assembly line counting, etc.



.. image:: media/2.2.5IR_Obstacle.png
   :width: 300
   :align: center

Components Required
------------------------

.. image:: media/2.2.5component.png
   :width: 700
   :align: center

Experimental Principle
-----------------------------

.. image:: media/2.2.5IR_Obstacle.png
   :width: 300
   :align: center

The IR obstacle avoidance module module has strong adaptability to environmental light, it has a pair of infrared transmitting and receiving tubes.

The transmitting tube emits infrared frequency, when the detection direction encounters an obstacle, the infrared radiation is received by the receiving tube, 
after the comparator circuit processing, the green indicator will light up and output low level signal.

The detection distance can be adjusted by potentiometer, the effective distance range 2-30cm.

.. image:: media/IR_module.png


Schematic Diagram
-----------------------

.. image:: media/IR_schematic.png
   :width: 500
   :align: center

Experimental Procedures
-------------------------

**Step 1:** Build the circuit

.. image:: media/2.2.5fritzing.png
   :width: 700
   :align: center

**Step 2:** Change directory.

.. code-block::
   
   cd /home/pi/raphael-kit/python

**Step 3:** Run.

.. code-block::

   sudo python3 2.2.5_IrObstacle.py

After the code runs, when you put your hand in front of the module's probe, the output indicator on the module lights up and the "Detected Barrier!" will be 
repeatedly printed on the screen until the your hand is removed.

**Code**

.. code-block:: python

   #!/usr/bin/env python3
   import RPi.GPIO as GPIO

   ObstaclePin = 17

   def setup():
      GPIO.setmode(GPIO.BCM)       # Numbers GPIOs by physical location
      GPIO.setup(ObstaclePin, GPIO.IN, pull_up_down=GPIO.PUD_UP)

   def loop():
      while True:
         if (0 == GPIO.input(ObstaclePin)):
            print ("Detected Barrier!")
            

   def destroy():
      GPIO.cleanup()                     # Release resource

   if __name__ == '__main__':     # Program start from here
      setup()
      try:
         loop()
      except KeyboardInterrupt:  # When 'Ctrl+C' is pressed, the child program destroy() will be  executed.
         destroy()

**Code Explanation**

.. code-block::

   def setup():
   GPIO.setmode(GPIO.BCM)       # Numbers GPIOs by physical location
   GPIO.setup(ObstaclePin, GPIO.IN, pull_up_down=GPIO.PUD_UP)

Set the GPIO modes to BCM Numbering. Set ``ObstaclePin`` to input mode and initial it to High level (3.3v).

.. code-block::

   def loop():
      while True:
         if (0 == GPIO.input(ObstaclePin)):
            print ("Detected Barrier!")

When ``ObstaclePin`` is low level, print "Detected Barrier!". It means that an obstacle is detected.

Phenomenon Picture
-----------------------

.. image:: media/2.2.5IR.jpg
   :width: 500
   :align: center