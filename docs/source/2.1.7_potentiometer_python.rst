2.1.7 Potentiometer
===================

Introduction
------------

The ADC function can be used to convert analog signals to digital
signals, and in this experiment, ADC0834 is used to get the function
involving ADC. Here, we implement this process by using potentiometer.
Potentiometer changes the physical quantity -- voltage, which is
converted by the ADC function.

Components
----------

.. image:: media/list_2.1.4_potentiometer.png


Principle
---------

**ADC0834**

ADC0834 is an 8-bit successive approximation analog-to-digital converter that is equipped with an input-configurable
multichannel multi-plexer and serial input/output. The serial
input/output is configured to interface with standard shift registers or
microprocessors.

.. image:: media/image309.png


**Sequence of Operation**

A conversion is initiated by setting CS low, which enables all logic
circuits. CS must be held low for the complete conversion process. A
clock input is then received from the processor. On each low-to-high
transition of the clock input, the data on DI is clocked into the
multiplexer address shift register. The first logic high on the input is
the start bit. A 3- to 4-bit assignment word follows the start bit. On
each successive low-to-high transition of the clock input, the start bit
and assignment word are shifted through the shift register. When the
start bit is shifted into the start location of the multiplexer
register, the input channel is selected and conversion starts. The SAR
Statu output (SARS) goes high to indicate that a conversion is in
progress, and DI to the multiplexer shift register is disabled the
duration of the conversion.

An interval of one clock period is automatically inserted to allow the
selected multiplexed channel to settle. The data output DO comes out of
the high-impedance state and provides a leading low for this one clock
period of multiplexer settling time. The SAR comparator compares
successive outputs from the resistive ladder with the incoming analog
signal. The comparator output indicates whether the analog input is
greater than or less than the resistive ladder output. As the conversion
proceeds, conversion data is simultaneously output from the DO output
pin, with the most significant bit (MSB) first.

After eight clock periods, the conversion is complete and the SARS
output goes low. Finally outputs the least-significant-bit-first data
after the MSB-first data stream.

.. image:: media/image175.png


**ADC0834 MUX ADDRESS CONTROL LOGIC TABLE**

.. image:: media/image176.png


**Potentiometer**


Potentiometer is also a resistance component with 3 terminals and its
resistance value can be adjusted according to some regular variation.
Potentiometer usually consists of resistor and movable brush. When the
brush is moving along the resistor, there is a certain resistance or
voltage output depending on the displacement.

.. image:: media/image310.png


The functions of the potentiometer in the circuit are as follows:

1. Serving as a voltage divider

Potentiometer is a continuously adjustable resistor. When you adjust the
shaft or sliding handle of the potentiometer, the movable contact will
slide on the resistor. At this point, a voltage can be output depending
on the voltage applied onto the potentiometer and the angle the movable
arm has rotated to or the distance it moves.

Visit: https://en.wikipedia.org/wiki/Potentiometer, for more information.

Schematic Diagram
-----------------

.. image:: media/image311.png


.. image:: media/image312.png


Experimental Procedures
-----------------------

**Step 1:** Build the circuit.

.. image:: media/image180.png


.. note::
    Please place the chip by referring to the corresponding position
    depicted in the picture. Note that the grooves on the chip should be on
    the left when it is placed.

**Step 2:** Open the code file

.. code-block::

    cd /home/pi/raphael-kit/python/

**Step 3:** Run.

.. code-block::

    sudo python3 2.1.7_Potentiometer.py

After the code runs, rotate the knob on the potentiometer, the intensity
of LED will change accordingly.

**Code**

.. code-block:: python

    #!/usr/bin/env python3

    import RPi.GPIO as GPIO
    import ADC0834
    import time

    LedPin = 22

    def setup():
        global led_val
        # Set the GPIO modes to BCM Numbering
        GPIO.setmode(GPIO.BCM)
        # Set all LedPin's mode to output and initial level to High(3.3v)
        GPIO.setup(LedPin, GPIO.OUT, initial=GPIO.HIGH)
        ADC0834.setup()
        # Set led as pwm channel and frequece to 2KHz
        led_val = GPIO.PWM(LedPin, 2000)

        # Set all begin with value 0
        led_val.start(0)

    # Define a MAP function for mapping values.  Like from 0~255 to 0~100
    def MAP(x, in_min, in_max, out_min, out_max):
        return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min

    def destroy():
        # Stop all pwm channel
        led_val.stop()
        # Release resource
        GPIO.cleanup()

    def loop():
        while True:
            res = ADC0834.getResult()
            print ('res = %d' % res)
            R_val = MAP(res, 0, 255, 0, 100)
            led_val.ChangeDutyCycle(R_val)
            time.sleep(0.2)

    if __name__ == '__main__':
        setup()
        try:
            loop()
        except KeyboardInterrupt: # When 'Ctrl+C' is pressed, the program destroy() will be executed.
            destroy()

**Code Explanation**

.. code-block:: python

    import ADC0834

import ADC0834 library. You can check the content of the library by
calling the command nano ADC0834.py.

.. code-block:: python

    def setup():
        global led_val
        # Set the GPIO modes to BCM Numbering
        GPIO.setmode(GPIO.BCM)
        # Set all LedPin's mode to output and initial level to High(3.3v)
        GPIO.setup(LedPin, GPIO.OUT, initial=GPIO.HIGH)
        ADC0834.setup()
        # Set led as pwm channel and frequece to 2KHz
        led_val = GPIO.PWM(LedPin, 2000)

        # Set all begin with value 0
        led_val.start(0)

In setup(), define the naming method as BCM, set LedPin as PWM channel
and render it a frequency of 2Khz.

**ADC0834.setup():** Initialize ADC0834, and connect the defined CS,
CLK, DIO of ADC0834 to GPIO17, GPIO18 and GPIO27 respectively.

.. code-block:: python

    def loop():
        while True:
            res = ADC0834.getResult()
            print ('res = %d' % res)
            R_val = MAP(res, 0, 255, 0, 100)
            led_val.ChangeDutyCycle(R_val)
            time.sleep(0.2)

The function getResult() is used to read the analog values of the four
channels of ADC0834. By default, the function reads the value of CH0,
and if you want to read other channels, please input the channel number
in **( )**, ex. getResult(1).

The function loop() first reads the value of CH0, then assign the value
to the variable res. After that, call the function MAP to map the read
value of potentiometer to 0~100. This step is used to control the duty
cycle of LedPin. Now, you may see that the brightness of LED is changing
with the value of potentiometer.


Phenomenon Picture
------------------

.. image:: media/image181.jpeg


