1.1.1 Blinking LED
=========================

Introduction
-----------------

In this lesson, we will learn how to make a blinking LED by programming.
Through your settings, your LED can produce a series of interesting
phenomena. Now, go for it.

Components
------------------

.. image:: media/blinking_LED_list.png
    :width: 800
    :align: center


.. note::
    In order to proceed smoothly, you need to bring your own
    Raspberry Pi, TF card and Raspberry Pi power.


Principle
-----------

**Breadboard**

A breadboard is a construction base for prototyping of electronics. It
is used to build and test circuits quickly before finishing any circuit
design. And it has many holes into which components mentioned above can
be inserted like ICs and resistors as well as jumper wires. The
breadboard allows you to plug in and remove components easily.

The picture shows the internal structure of a full+ breadboard. Although
these holes on the breadboard appear to be independent of each other,
they are actually connected to each other through metal strips
internally.

.. image:: media/image41.png

**LED**

LED is a kind of diode. LED will shine only if the long pin of LED is
connected to the positive electrode and the short pin is connected to
negative electrode.

.. |image42| image:: media/image42.png

.. |image43| image:: media/image43.png

|image42|\ |image43|

The LED can not be directly connected to power supply, which can damage
component. A resistor with 160Ω or larger (work in 5V) must be connected
in series in the circuit of LED.

Visit:  https://en.wikipedia.org/wiki/Light-emitting_diode, for more information.


**Resistor**

Resistor is an electronic element that can limit the branch current. A
fixed resistor is a kind of resistor whose resistance cannot be changed,
while that of a potentiometer or a variable resistor can be adjusted.

Fixed resistor is applied in this kit. In the circuit, it is essential
to protect the connected components. The following pictures show a real
object, 220Ω resistor and two generally used circuit symbols of
resistor. Ω is the unit of resistance and the larger units include KΩ,
MΩ, etc. Their relationship can be shown as follows: 1 MΩ=1000 KΩ, 1 KΩ
= 1000 Ω. Normally, the value of resistance is marked on it. So if you
see these symbols in a circuit, it means that there is a resistor.

.. image:: media/image44.png

.. |image45| image:: media/image45.png

.. |image46| image:: media/image46.png

|image45|\ |image46|

When using a resistor, we need to know its resistance first. Here are
two methods: you can observe the bands on the resistor, or use a
multimeter to measure the resistance. You are recommended to use the
first method as it is more convenient and faster. To measure the value,
use multimeter.

As shown in the card, each color stands for a number.

.. image:: media/image47.jpeg

Visit: https://simple.wikipedia.org/wiki/Resistor, for mor information.

Schematic Diagram
---------------------

In this experiment, connect a 220Ω resistor to the anode (the long pin
of the LED), then the resistor to 3.3 V, and connect the cathode (the
short pin) of the LED to GPIO17 of Raspberry Pi. Therefore, to turn on
an LED, we need to make GPIO17 low (0V) level. We can get this
phenomenon by programming.

.. note::

    **Pin11** refers to the 11th pin of the Raspberry Pi from left to right, and its corresponding **wiringPi** and **BCM** pin numbers are shown in the following table.

In the C language related content, we make GPIO0 equivalent to 0 in the
wiringPi. Among the Python language related content, BCM 17 is 17 in the
BCM column of the following table. At the same time, they are the same
as the 11th pin on the Raspberry Pi, Pin 11.

============ ======== ======== ===
T-Board Name physical wiringPi BCM
GPIO17       Pin 11   0        17
============ ======== ======== ===

.. image:: media/image48.png
    :width: 800
    :align: center

Experimental Procedures
-----------------------------

**Step 1:** Build the circuit.

.. image:: media/image49.png
    :width: 800
    :align: center

**Step 2:** Go to the folder of the code and run it.

1. If you use a screen, you're recommended to take the following steps.

Find 1.1.1_BlinkingLed.py and double click it to open. Now you're in the
file.

Click **Run** ->\ **Run Module** in the window and the following
contents will appear.

To stop it from running, just click the X button on the top right to
close it and then you'll back to the code. If you modify the code,
before clicking **Run Module (F5)** you need to save it first. Then you
can see the results.

2. If you log into the Raspberry Pi remotely, type in the command:

.. code-block:: python

   cd /home/pi/raphael-kit/python

.. note::
    Change directory to the path of the code in this experiment via ``cd``.

**Step 3:** Run the code

.. code-block:: python

   sudo python3 1.1.1_BlinkingLed.py

.. note::
    Here sudo - superuser do, and python means to run the file by Python.

After the code runs, you will see the LED flashing.

**Step 4:** If you want to edit the code file 1.1.1_BlinkingLed.py,
press ``Ctrl + C`` to stop running the code. Then type the following
command to open 1.1.1_BlinkingLed.py:

.. code-block:: python

   nano 1.1.1_BlinkingLed.py

.. note::
    nano is a text editor tool. The command is used to open the
    code file 1.1.1_BlinkingLed.py by this tool.

Press ``Ctrl+X`` to exit. If you have modified the code, there will be a
prompt asking whether to save the changes or not. Type in ``Y`` (save)
or ``N`` (don’t save).

Then press ``Enter`` to exit. Type in nano 1.1.1_BlinkingLed.py again to
see the effect after the change.

**Code**

The following is the program code:

.. code-block:: python

   #!/usr/bin/env python3
   import RPi.GPIO as GPIO
   import time
   LedPin = 17
   def setup():
      # Set the GPIO modes to BCM Numbering
      GPIO.setmode(GPIO.BCM)
      # Set LedPin's mode to output,and initial level to High(3.3v)
      GPIO.setup(LedPin, GPIO.OUT, initial=GPIO.HIGH)
   # Define a main function for main process
   def main():
      while True:
         print ('...LED ON')
         # Turn on LED
         GPIO.output(LedPin, GPIO.LOW)
         time.sleep(0.5)
         print ('LED OFF...')
         # Turn off LED
         GPIO.output(LedPin, GPIO.HIGH)
         time.sleep(0.5)
   # Define a destroy function for clean up everything after the script finished
   def destroy():
      # Turn off LED
      GPIO.output(LedPin, GPIO.HIGH)
      # Release resource
      GPIO.cleanup()                   
   # If run this script directly, do:
   if __name__ == '__main__':
      setup()
      try:
         main()
      # When 'Ctrl+C' is pressed, the program destroy() will be  executed.
      except KeyboardInterrupt:
         destroy()

**Code Explanation**

.. code-block:: python

   #!/usr/bin/env python3

When the system detects this, it will search the installation path of
python in the env setting, then call the corresponding interpreter to
complete the operation. It’s to prevent the user not installing the
python onto the /usr/bin default path.

.. code-block:: python

   import RPi.GPIO as GPIO

In this way, import the RPi.GPIO library, then define a variable, GPIO
to replace RPI.GPIO in the following code.

.. code-block:: python

   import time

Import time package, for time delay function in the following program.

.. code-block:: python

   LedPin = 17

LED connects to the GPIO17 of the T-shape extension board, namely, BCM
17.

.. code-block:: python

   def setup():
      GPIO.setmode(GPIO.BCM)
      GPIO.setup(LedPin, GPIO.OUT, initial=GPIO.HIGH)

Set LedPin's mode to output, and initial level to High (3.3v).

There are two ways of numbering the IO pins on a Raspberry Pi within
RPi.GPIO: BOARD numbers and BCM numbers. In our lessons, what we use is
BCM numbers. You need to set up every channel you are using as an input
or an output.

.. code-block:: python

   GPIO.output(LedPin, GPIO.LOW)

Set GPIO17(BCM17) as 0V (low level). Since the cathode of LED is
connected to GPIO17, thus the LED will light up.

.. code-block:: python

   time.sleep(0.5)

Delay for 0.5 second. Here, the statement is delay function in C language, the unit is second.

.. code-block:: python

   def destroy():
      GPIO.cleanup()  

Define a destroy function for clean up everything after the script
finished.

.. code-block:: python

   if __name__ == '__main__':
      setup()
      try:
         main()
      # When 'Ctrl+C' is pressed, the program destroy() will be  executed.
      except KeyboardInterrupt:
         destroy()

This is the general running structure of the code. When the program
starts to run, it initializes the pin by running the setup(), and then
runs the code in the main() function to set the pin to high and low
levels. When 'Ctrl+C' is pressed, the program,
destroy() will be  executed.  

Phenomenon Picture
--------------------

.. image:: media/image54.jpeg
    :width: 800
    :align: center