2.1.3 Touch Switch Module
========================

**Introduction**
-------------------

In this lesson, you will learn about touch switch module. It can replace 
the traditional kinds of switch with these advantages: convenient operation, 
fine touch sense, precise control and least mechanical wear.


**Components**
-----------------------------

.. image:: media/2.1.3component.png
    :width: 700
    :align: center

**Principle**
---------------------------

Touch switch module works by detecting a change in capacitance due to influence 
of an external object. The touch plate is covered with insulating material, 
and the user does not come in contact with the electrical circuit.

A capacitive touch switch has different layersâ€”top insulating face plate 
followed by touch plate, another insulating layer and then ground plate.

.. image:: media/2.1.3touch_switch.png
    :width: 200
    :align: center

In practice, a capacitive sensor can be made on a double-sided PCB by regarding one side as the touch sensor and the opposite side as ground plate of the capacitor. When power is applied across these plates, the two plates get charged. In equilibrium state, the plates have the same voltage as the power source.

The touch detector circuit has an oscillator whose frequency is dependent on capacitance of the touchpad. When a finger is moved close to the touchpad, additional capacitance causes frequency of this internal oscillator to change. The detector circuit tracks oscillator frequency at timed intervals, and when the shift crosses the threshold change, the circuit triggers a key-press event.

.. image:: media/2.1.3touch_switch2.png

Visit: https://en.wikipedia.org/wiki/Touch_switch, for more information.

Schematic Diagram
-----------------

.. image:: media/2.1.3circuit.png
    :width: 500
    :align: center

**Experimental Procedures**
------------------------------

**Step 1::** Build the circuit.

.. image:: media/2.1.3fritzing.png
    :width: 700
    :align: center

**Step 2:** Change directory.

.. code-block::

    cd /home/pi/raphael-kit/python/

**Step 3:** Run.

.. code-block::

    sudo python3 2.1.3_TouchSwitch.py

While the code is running, the red LED lights up; when you touch the  
metal disk, the yellow light turns on. 

**Code**

.. code-block:: python

    #!/usr/bin/env python3

    import RPi.GPIO as GPIO
    import time

    # Set #17 as touch switch pin, #22 as led1 pin, #27 as led2 pin
    touchPin = 17
    led1Pin = 22
    led2Pin = 27

    # Define a setup function for some setup
    def setup():
        # Set the GPIO modes to BCM Numbering
        GPIO.setmode(GPIO.BCM)
        # Set touchPin input
        # Set ledPin output, 
        # and initial level to High(3.3v)
        GPIO.setup(touchPin, GPIO.IN)
        GPIO.setup(led1Pin, GPIO.OUT, initial=GPIO.HIGH)
        GPIO.setup(led2Pin, GPIO.OUT, initial=GPIO.HIGH)

    # Define a main function for main process
    def main():
        while True:
            # touch switch high, led1 on
            if GPIO.input(touchPin) == 1:
                print ('You touch it!')
                GPIO.output(led1Pin, GPIO.LOW)
                GPIO.output(led2Pin, GPIO.HIGH)

            # touch switch low, led2 on
            if GPIO.input(touchPin) == 0:
                GPIO.output(led2Pin, GPIO.LOW)
                GPIO.output(led1Pin, GPIO.HIGH)

            time.sleep(0.5)
    # Define a destroy function for clean up everything after
    # the script finished 
    def destroy():
        # Turn off LED
        GPIO.output(led1Pin, GPIO.HIGH)
        GPIO.output(led2Pin, GPIO.HIGH)
        # Release resource
        GPIO.cleanup()                     

    # If run this script directly, do:
    if __name__ == '__main__':
        setup()
        try:
            main()
        # When 'Ctrl+C' is pressed, the program 
        # destroy() will be  executed.
        except KeyboardInterrupt:
            destroy()	

**Code Explanation**

.. code-block:: python
    
    touchPin = 17
    led1Pin = 22
    led2Pin = 27

touchPin, led1Pin and led2Pin connects to the GPIO17, GPIO22 and GPIO27,
namely BCM17, BCM22 and BCM27.

.. code-block:: python

    GPIO.setmode(GPIO.BCM)
	GPIO.setup(touchPin, GPIO.IN)
	GPIO.setup(led1Pin, GPIO.OUT, initial=GPIO.HIGH)
	GPIO.setup(led2Pin, GPIO.OUT, initial=GPIO.HIGH)

Set the GPIO modes to BCM Numbering. Set led1Pin, led2Pin to output mode 
and initial their level to High (3.3v).

.. code-block:: python

    # touch switch high, led1 on
    if GPIO.input(touchPin) == 1:
        print ('You touch it!')
        GPIO.output(led1Pin, GPIO.LOW)
        GPIO.output(led2Pin, GPIO.HIGH)

    # touch switch low, led2 on
    if GPIO.input(touchPin) == 0:
        GPIO.output(led2Pin, GPIO.LOW)
        GPIO.output(led1Pin, GPIO.HIGH)

When touchPin is high, led1Pin writes low level, led1 lights up and prints 
"You touch it!". When touchPin is low, led2Pin writes low level and 
led1Pin writes high level. led2 is on, led1 is off.

Now, touch the metal disk, you can see the LED change its colors.

**Phenomenon Picture**
------------------------

.. image:: media/2.1.3touch_switch_module.jpg
    :width: 500
    :align: center