4.1.16 Alarm Bell
~~~~~~~~~~~~~~~~~

**Introduction**
-----------------

In this course, we will make a manual alarm device. You can replace the
toggle switch with a thermistor or a photosensitive sensor to make a
temperature alarm or a light alarm.

**Components**
---------------

.. image:: media/list_Alarm_Bell.png
    :align: center

**Schematic Diagram**
-------------------------

============ ======== ======== ===
T-Board Name physical wiringPi BCM
GPIO17       Pin 11   0        17
GPIO18       Pin 12   1        18
GPIO27       Pin 13   2        27
GPIO22       Pin 15   3        22
============ ======== ======== ===

.. image:: media/Schematic_three_one10.png
   :align: center

**Experimental Procedures**
-----------------------------

**Step 1**: Build the circuit.

.. image:: media/image266.png
   :alt: Alarm Bell_bb
   :width: 6.64861in
   :height: 3.61458in

**Step 2:** Change directory.

.. code-block:: python

    cd /home/pi/raphael-kit/python/

**Step 3:** Run.

.. code-block:: python

    sudo python3 4.1.16_AlarmBell.py

After the program starts, the toggle switch will be toggled to the
right, and the buzzer will give out alarm sounds. At the same time, the
red and green LEDs will flash at a certain frequency.

**Code Explanation**

.. code-block:: python

    import threading

Here, we import the ``Threading`` module and it allows you to do
multiple things at once, while normal programs can only execute code
from top to bottom. With ``Threading`` modules, the LED and the buzzer
can work separately.

.. code-block:: python

    def ledWork():
        while flag:
            GPIO.output(ALedPin,GPIO.HIGH)
            time.sleep(0.5)
            GPIO.output(ALedPin,GPIO.LOW)
            GPIO.output(BLedPin,GPIO.HIGH)
            time.sleep(0.5)
            GPIO.output(BLedPin,GPIO.LOW)

The function ``ledWork()`` helps to set the working state of these 2 LEDs:
it keeps the green LED lighting up for 0.5s and then turns off;
similarly, keeps the red LED lighting up for 0.5s and then turns off.

.. code-block:: python

    def buzzerWork():
        global pitch
        global note
        while flag:
            if note >= 800 or note <=130:
                pitch = -pitch
            note = note + pitch 
            Buzz.ChangeFrequency(note)
            time.sleep(0.01)

The function ``buzzWork()`` is used to set the working state of the buzzer.
Here we set the frequency as between 130 and 800, to accumulate or decay
at an interval of 20.

.. code-block:: python

    def on():
        global flag
        flag = 1
        Buzz.start(50)
        tBuzz = threading.Thread(target=buzzerWork) 
        tBuzz.start()
        tLed = threading.Thread(target=ledWork) 
        tLed.start()  

In the function ``on()`` :

1) Define the mark “flag=1”, indicating the ending of the control
   thread.

2) Start the Buzz, and set the duty cycle to 50%.

3) Create **2** separate threads so that the LED and the buzzer can work
   at the same time.

   ``tBuzz = threading.Thread(target=buzzerWork)`` \ **：**\ Create the
   thread and its prototype is as follows:

   ``class threading.Thread(group=None, target=None, name=None, args=(), kwargs={}, *, daemon=None)``

Among the construction methods, the principal parameter is **target**,
we need to assign a callable object (here are the functions **ledWork**
and **BuzzWork**) to **target**.

Next ``start()`` is called to start the thread object, ex.,
``tBuzz.start()`` is used to start the newly installed ``tBuzz`` thread.

.. code-block:: python

    def off():
        global flag
        flag = 0
        Buzz.stop()
        GPIO.output(ALedPin,GPIO.LOW)
        GPIO.output(BLedPin,GPIO.LOW)

The function ``Off()`` defines “flag=0” so as to exit the threads
**ledWork** and **BuzzWork** and then turn off the buzzer and the LED.

.. code-block:: python

    def main():
        lastState=0
        while True:
            currentState =GPIO.input(switchPin)
            if currentState == 1 and lastState == 0:
                on()
            elif currentState == 0 and lastState == 1:
                off()
            lastState=currentState

``Main()`` contains the whole process of the program: firstly read the value
of the slide switch; if the toggle switch is toggled to the right (the
reading is 1), the function ``on()`` is called, the buzzer is driven to emit
sounds and the the red and the green LEDs blink. Otherwise, the buzzer
and the LED don’t work.

**Phenomenon Picture**
------------------------

.. image:: media/image267.jpeg
   :align: center